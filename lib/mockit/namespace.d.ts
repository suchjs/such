import { MockitConfig, TObject, SuchOptions } from '../types';
export declare type Result<T> = T | never;
export declare type ModifierFn<T> = (res: T) => T | string | never;
export declare type RuleFn = (cur: TObject) => void | TObject;
export default abstract class Mockit<T> {
  protected readonly constructorName: string;
  protected configOptions: MockitConfig;
  protected params: TObject;
  protected origParams: TObject;
  protected generateFn: undefined | ((options: SuchOptions) => Result<T>);
  protected isValidOk: boolean;
  protected hasValid: boolean;
  protected invalidKeys: string[];
  constructor(constructorName: string);
  abstract init(): void;
  addModifier(name: string, fn: ModifierFn<T>, pos?: string): void;
  addRule(name: string, fn: RuleFn, pos?: string): void;
  setParams(params: TObject, value: undefined): TObject | never;
  setParams(key: string, value: TObject): TObject | never;
  frozen(): this;
  reGenerate(fn?: (options: SuchOptions) => Result<T>): void;
  make(options: SuchOptions): Result<T>;
  abstract generate(options: SuchOptions): Result<T>;
  abstract test(target: T): boolean;
  private add;
  private validParams;
  private validate;
  private resetValidInfo;
  private runModifiers;
  private runFuncs;
  private runAll;
}
